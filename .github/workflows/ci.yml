name: CI

on: [push, pull_request]

jobs:
  # Standard Python test job
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Debug repository structure
        run: |
          echo "Repository contents:"
          ls -la
          echo "Code directory contents:"
          ls -la code/ || echo "Code directory not found"
          echo "Requirements file:"
          cat code/requirements.txt || echo "Requirements file not found"
      - name: Install dependencies
        run: pip install -r code/requirements.txt
      - name: Create qa directory
        run: mkdir -p qa
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=${GITHUB_WORKSPACE}/code" >> $GITHUB_ENV
      - name: Debug test files
        run: |
          echo "Code directory contents:"
          ls -la code/
          echo "Tests directory contents:"
          ls -la code/tests/ || echo "Tests directory not found"
      - name: Run tests
        run: |
          cd code
          echo "Running test_lattice.py..."
          python tests/test_lattice.py
          echo "Running test_dilemmas.py..."
          python tests/test_dilemmas.py
          echo "Running test_simulator.py..."
          python tests/test_simulator.py
          echo "Running test_timeline.py..."
          python tests/test_timeline.py
          echo "Running test_end_to_end.py..."
          python tests/test_end_to_end.py
      - name: Run basic evaluation
        run: |
          cd code
          python run_evaluation.py --out ../qa/example_ci.json
      - name: Run timeline analysis
        run: |
          cd code
          python run_timeline.py --out ../qa/timeline_ci.json
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-outputs
          path: |
            qa/example_ci.json
            qa/timeline_ci.json

  # Docker build and test job (Phase 3 requirement)
  docker-build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Debug Docker setup
        run: |
          echo "Repository structure for Docker:"
          ls -la
          echo "Dockerfile contents:"
          head -20 Dockerfile
          echo "Docker version:"
          docker --version
      - name: Create logs directory
        run: mkdir -p qa/logs
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t r3p-drift . --progress=plain
          echo "Docker image built successfully"
      - name: Run Docker container with logging
        run: |
          echo "Running Docker container..."
          docker run --rm -v $(pwd)/qa:/app/qa r3p-drift 2>&1 | tee qa/logs/ci_log.txt
          echo "Docker container completed"
      - name: Verify Docker outputs
        run: |
          ls -la qa/
          test -f qa/timeline_docker.json
          test -f qa/logs/ci_log.txt
          echo "Docker run completed successfully"
      - name: Validate Docker JSON output
        run: |
          python -c "
          import json
          with open('qa/timeline_docker.json', 'r') as f:
              data = json.load(f)
          assert 'metadata' in data
          assert 'timeline' in data
          assert 'drift_analysis' in data
          assert len(data['timeline']) > 1
          print(f'Docker output validated: {len(data[\"timeline\"])} timeline steps')
          "
      - name: Upload Docker artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-outputs
          path: |
            qa/timeline_docker.json
            qa/logs/ci_log.txt

  # Integration test comparing outputs
  integration-test:
    runs-on: ubuntu-latest
    needs: [test, docker-build-and-test]
    steps:
      - uses: actions/checkout@v4
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-outputs
          path: qa/
      - name: Download Docker artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-outputs
          path: qa/
      - name: Verify all required outputs
        run: |
          test -f qa/timeline_docker.json
          test -f qa/logs/ci_log.txt
          echo "All required CI outputs present"
      - name: Compare outputs
        run: |
          python -c "
          import json

          # Load outputs
          with open('qa/timeline_ci.json', 'r') as f:
              native_data = json.load(f)
          with open('qa/timeline_docker.json', 'r') as f:
              docker_data = json.load(f)

          # Compare structure
          assert 'timeline' in native_data and 'timeline' in docker_data
          print(f'Native timeline steps: {len(native_data[\"timeline\"])}')
          print(f'Docker timeline steps: {len(docker_data[\"timeline\"])}')

          # Both should have substantial timelines
          assert len(native_data['timeline']) > 1
          assert len(docker_data['timeline']) > 1

          print('Integration test passed: outputs are structurally consistent')
          "